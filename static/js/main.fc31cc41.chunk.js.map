{"version":3,"sources":["App.js","ExportCSV.js","component/Movie.js","index.js"],"names":["movieArray","ExportCSV","csvData","fileName","className","onClick","e","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","data","Blob","FileSaver","exportToCSV","Movie","title","poster_path","vote_average","src","alt","App","useState","movies","setMovies","search","setSearch","useEffect","fetch","then","res","json","results","filteredmovies","filter","toLowerCase","includes","filtergenre","genre_id","updatedlist","movie","genre_ids","placeholder","onChange","target","value","popularity","popularmovies","filtervotehigh","filtervotelow","length","map","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sJAKIA,E,qECGSC,EAAY,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SA0BhC,OAEI,wBAAQC,UAAU,SAASC,QAAS,SAACC,GAAD,OAlBpB,SAACJ,EAASC,GAE1B,IAEMI,EAAK,CAAEC,OAAQ,CAAE,KAFZC,QAAWC,cAAcR,IAECS,WAAY,CAAC,SAE5CC,EAAcH,QAAWF,EAAI,CAAEM,SAAU,OAAQC,KAAM,UAEvDC,EAAO,IAAIC,KAAK,CAACJ,GAAc,CAACE,KAdzB,oFAgBbG,SAAiBF,EAAMZ,EAdL,SAsByBe,CAAYhB,EAAQC,IAA/D,qBCpBOgB,EAZH,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAMC,EAAR,EAAQA,YAAYC,EAApB,EAAoBA,aAApB,OAEJ,sBAAKlB,UAAU,QAAf,UACA,qBAAKmB,IALG,kCAKYF,EAAaG,IAAKJ,IACtC,sBAAKhB,UAAU,aAAf,UACI,6BAAKgB,IACL,+BAAOE,WF8FJG,MAhGf,WAEG,MAAwBC,mBAAS,IAAjC,mBAAMC,EAAN,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAGAC,qBAAU,WACRC,MAXK,oGAYJC,MAAM,SAACC,GAAD,OAASA,EAAIC,UACpBF,MAAK,SAAClB,GAGLf,EAAWe,EAAKqB,QAChBR,EAAUb,EAAKqB,cAGf,IAEJ,IAAMC,EAAiBV,EAAOW,QAAO,SAAAX,GAAM,OACzCA,EAAOP,MAAMmB,cAAcC,SAASX,EAAOU,kBAIvCE,EAAY,SAACC,GAEhB,IAAMC,EAAY3C,EAAWsC,QAAO,SAACM,GACpC,OAAOA,EAAMC,UAAUL,SAASE,MAGjCd,EAAUe,IAoCb,OAEE,qCACA,mCACE,8BACF,uBAAO7B,KAAK,SAASV,UAAU,SAAS0C,YAAY,uBAAwBC,SAAU,SAACzC,GAAD,OAAKwB,EAAUxB,EAAE0C,OAAOC,YAE9G,gCACE,wBAAQ7C,UAAU,QAAQC,QAAS,kBAAIoC,EAAY,KAAnD,oBACA,wBAAQrC,UAAU,QAAQC,QAAS,kBAAIoC,EAAY,KAAnD,uBACA,wBAAQrC,UAAU,QAAQC,QAAS,kBAAIoC,EAAY,KAAnD,oBACA,wBAAQrC,UAAU,QAAQC,QAAS,kBAAIoC,EAAY,KAAnD,oBACA,wBAAQrC,UAAU,QAAQC,QAAS,kBAAIoC,EAAY,KAAnD,qBACA,wBAAQrC,UAAU,QAAQC,QAAS,kBAAIuB,EAAU5B,IAAjD,wBACA,wBAAQI,UAAU,UAAUC,QAAS,kBA1BrB,WAEjB,IAAMsC,EAAYhB,EAAOW,QAAO,SAACM,GAGhC,OAAOA,EAAMM,WAAW,OAGzBtB,EAAUe,GAkBgCQ,IAAzC,4BACA,cAAC,EAAD,CAAWjD,QAASyB,EAAQxB,SAjBnB,0BAmBT,gCACA,wBAAQC,UAAU,WAAWC,QAAS,kBAlDrB,WAElB,IAAMsC,EAAYhB,EAAOW,QAAO,SAACM,GAGhC,OAAOA,EAAMtB,cAAc,OAG5BM,EAAUe,GA0CiCS,IAA1C,gCACA,wBAAQhD,UAAU,WAAWC,QAAS,kBAzCtB,WAEjB,IAAMsC,EAAYhB,EAAOW,QAAO,SAACM,GAGhC,OAAOA,EAAMtB,aAAa,OAG3BM,EAAUe,GAiCiCU,IAA1C,qCAKF,qBAAKjD,UAAU,kBAAf,SACEiC,EAAeiB,OAAO,GAAKjB,EAAekB,KAAI,SAACX,GAAD,OAAU,cAAC,EAAD,eAA0BA,GAAdA,EAAMY,aG9FhFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.fc31cc41.chunk.js","sourcesContent":["import React,{useEffect,  useState} from \"react\";\r\nimport {ExportCSV} from './ExportCSV';\r\nimport Movie from './component/Movie';\r\n\r\nconst API=\"https://api.themoviedb.org/3/trending/movie/week?api_key=d1b5dbca43fc530f074d13cfdbb73d52&page=3\"\r\nlet movieArray;\r\n\r\n\r\nfunction App() {\r\n  \r\n   const[movies,setMovies]=useState([]);\r\n   const [search, setSearch] = useState('');\r\n\r\n\r\n   useEffect(() => {\r\n     fetch(API)\r\n     .then ((res) => res.json())\r\n    .then((data)=>{ \r\n      // console.log(\"api called\");\r\n      // console.log(data.results);\r\n      movieArray=data.results;\r\n      setMovies(data.results);\r\n    });\r\n     \r\n   }, [])\r\n\r\n  const filteredmovies = movies.filter(movies =>\r\n    movies.title.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n  \r\n   \r\n  const filtergenre=(genre_id)=>{\r\n\r\n     const updatedlist=movieArray.filter((movie)=>{\r\n      return movie.genre_ids.includes(genre_id);\r\n     });\r\n    //  console.log(updatedlist);\r\n     setMovies(updatedlist);\r\n  }\r\n\r\n\r\n  const filtervotehigh=()=>{\r\n\r\n     const updatedlist=movies.filter((movie)=>{\r\n\r\n\r\n      return movie.vote_average>=7.5;\r\n     });\r\n    //  console.log(updatedlist);\r\n     setMovies(updatedlist);\r\n  }\r\n  const filtervotelow=()=>{\r\n\r\n     const updatedlist=movies.filter((movie)=>{\r\n\r\n\r\n      return movie.vote_average<7.5;\r\n     });\r\n    //  console.log(updatedlist);\r\n     setMovies(updatedlist);\r\n  }\r\n  const popularmovies=()=>{\r\n\r\n     const updatedlist=movies.filter((movie)=>{\r\n\r\n\r\n      return movie.popularity>700;\r\n     });\r\n    //  console.log(updatedlist);\r\n     setMovies(updatedlist);\r\n  }\r\nconst filename=\"movies-data-webapp\";\r\n\r\n  return (\r\n    \r\n    <>\r\n    <center>\r\n      <div>\r\n    <input type=\"search\" className=\"search\" placeholder=\"Search for movies...\"  onChange={(e)=>setSearch(e.target.value)} />\r\n    </div>\r\n    <div> \r\n      <button className=\"genre\" onClick={()=>filtergenre(28)}>Action</button>\r\n      <button className=\"genre\" onClick={()=>filtergenre(12)}>Adventure</button>\r\n      <button className=\"genre\" onClick={()=>filtergenre(27)}>Horror</button>\r\n      <button className=\"genre\" onClick={()=>filtergenre(35)}>Comedy</button>\r\n      <button className=\"genre\" onClick={()=>filtergenre(14)}>Fantasy</button>\r\n      <button className=\"genre\" onClick={()=>setMovies(movieArray)}>All Movies</button>\r\n      <button className=\"popular\" onClick={()=>popularmovies()}>Popular Movies</button>\r\n      <ExportCSV csvData={movies} fileName={filename} />\r\n      </div>\r\n      <div> \r\n      <button className=\"voterate\" onClick={()=>filtervotehigh()}>High rating movies</button>\r\n      <button className=\"voterate\" onClick={()=>filtervotelow()}>Low rating movies</button>\r\n      \r\n      \r\n      </div>\r\n    </center>\r\n    <div className=\"movie-container\">\r\n     {filteredmovies.length>0 && filteredmovies.map((movie) =><Movie key={movie.id} {...movie}/>)}\r\n   </div>\r\n   </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\n\r\nimport * as FileSaver from 'file-saver';\r\n\r\nimport * as XLSX from 'xlsx';\r\n\r\n\r\n\r\nexport const ExportCSV = ({csvData, fileName}) => {\r\n\r\n\r\n\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n\r\n    const fileExtension = '.xlsx';\r\n\r\n\r\n\r\n    const exportToCSV = (csvData, fileName) => {\r\n\r\n        const ws = XLSX.utils.json_to_sheet(csvData);\r\n\r\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n\r\n        const data = new Blob([excelBuffer], {type: fileType});\r\n\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <button className=\"export\" onClick={(e) => exportToCSV(csvData,fileName)}>Export</button>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst IMG_API = \"https://image.tmdb.org/t/p/w300\";\r\n\r\nconst Movie=({title,poster_path,vote_average,}) =>(\r\n  \r\n        <div className=\"movie\">\r\n        <img src={IMG_API + poster_path} alt={title} />\r\n        <div className=\"movie-info\">\r\n            <h3>{title}</h3>\r\n            <span>{vote_average}</span>\r\n        </div>\r\n        \r\n        </div> \r\n)\r\n \r\nexport default Movie\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}